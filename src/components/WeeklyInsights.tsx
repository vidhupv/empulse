'use client';

import { useState, useEffect } from 'react';
import { Lightbulb as LightBulbIcon, CheckCircle as CheckCircleIcon } from 'lucide-react';

interface WeeklyInsight {
  insights: string[];
  recommendations: string[];
  weekStart: string;
  overallTrend: 'improving' | 'stable' | 'declining';
}

export default function WeeklyInsights() {
  const [insights, setInsights] = useState<WeeklyInsight | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadWeeklyInsights();
  }, []);

  const loadWeeklyInsights = async () => {
    try {
      setLoading(true);
      
      const response = await fetch('/api/dashboard/data?type=insights');
      const result = await response.json();
      
      if (response.ok && result.data) {
        setInsights({
          weekStart: result.data.weekStart || new Date().toISOString(),
          overallTrend: result.data.overallTrend || 'stable',
          insights: result.data.insights || [],
          recommendations: result.data.recommendations || []
        });
      } else {
        setInsights(null);
      }
    } catch (error) {
      console.error('Error loading weekly insights:', error);
      setInsights(null);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!insights) {
    return (
      <div className="text-center py-8">
        <LightBulbIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
        <p className="text-gray-600">No insights available yet</p>
        <p className="text-sm text-gray-500">Weekly insights will be generated after collecting more data</p>
      </div>
    );
  }

  const getTrendColor = (trend: string) => {
    switch (trend) {
      case 'improving': return 'text-green-600 bg-green-100';
      case 'declining': return 'text-red-600 bg-red-100';
      default: return 'text-blue-600 bg-blue-100';
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <LightBulbIcon className="w-5 h-5 text-blue-600" />
          <span className="text-sm font-medium text-gray-900">This Week's Analysis</span>
        </div>
        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTrendColor(insights.overallTrend)}`}>
          {insights.overallTrend}
        </span>
      </div>

      {/* Key Insights */}
      <div>
        <h4 className="text-sm font-medium text-gray-900 mb-3">Key Insights</h4>
        <div className="space-y-2">
          {insights.insights.map((insight, index) => (
            <div key={index} className="flex items-start space-x-2">
              <div className="w-1.5 h-1.5 bg-blue-400 rounded-full mt-2 flex-shrink-0"></div>
              <p className="text-sm text-gray-700 leading-relaxed">{insight}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Recommendations */}
      <div>
        <h4 className="text-sm font-medium text-gray-900 mb-3">Recommendations</h4>
        <div className="space-y-2">
          {insights.recommendations.map((recommendation, index) => (
            <div key={index} className="flex items-start space-x-2">
              <CheckCircleIcon className="w-4 h-4 text-green-500 mt-0.5 flex-shrink-0" />
              <p className="text-sm text-gray-700 leading-relaxed">{recommendation}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Footer */}
      <div className="pt-4 border-t border-gray-200">
        <p className="text-xs text-gray-500">
          Insights generated by AI analysis of team communication patterns. 
          Last updated: {new Date().toLocaleDateString()}
        </p>
      </div>
    </div>
  );
}